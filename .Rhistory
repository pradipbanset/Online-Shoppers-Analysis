valueBox(
value = formatC(nrow(data), format = "d", big.mark = ","),
subtitle = "Total Sessions",
icon = icon("users"),
color = "purple"
)
})
output$total_revenue <- renderValueBox({
valueBox(
value = formatC(sum(data$Revenue), format = "d", big.mark = ","),
subtitle = "Total Revenue Generating Sessions",
icon = icon("dollar-sign"),
color = "green"
)
})
output$avg_time_on_site <- renderValueBox({
valueBox(
value = round(mean(data$Time_on_Site), 2),
subtitle = "Average Time on Site (seconds)",
icon = icon("clock"),
color = "blue"
)
})
# Scatter Plot: Impact of ProductRelated_Duration on Revenue
output$scatter_product_duration <- renderPlotly({
plot_ly(
data = data,
x = ~ProductRelated_Duration,
y = ~PageValues,
type = 'scatter',
mode = 'markers',
color = ~Revenue,
marker = list(opacity = 0.6)
) %>%
layout(
title = 'Impact of Product-Related Duration on Page Value by Revenue',
xaxis = list(title = 'ProductRelated_Duration'),
yaxis = list(title = 'PageValues')
)
})
# Bar Chart: Revenue by Visitor Type
output$bar_revenue_visitor <- renderPlotly({
p <- ggplot(data, aes(x = VisitorType, fill = as.factor(Revenue))) +
geom_bar(position = "dodge") +
labs(title = "Revenue Comparison Across Visitor Types", x = "VisitorType", fill = "Revenue") +
theme_minimal()
ggplotly(p)
})
# Line Chart: User Engagement by Visitor Type Over Time
output$line_time_engagement <- renderPlotly({
p <- ggplot(data, aes(x = as.factor(Month), y = Time_on_Site, color = VisitorType, group = VisitorType)) +
geom_line(size = 1) +
geom_point() +
labs(title = "Tracking Monthly User Engagement by Visitor Type", x = "Month", y = "Time on Site", color = "VisitorType") +
theme_minimal()
ggplotly(p)
})
# Violin Plot: Distribution of Time on Site by Revenue
output$violin_time_spent <- renderPlotly({
p <- ggplot(data, aes(x = as.factor(Revenue), y = Time_on_Site, fill = as.factor(Revenue))) +
geom_violin() +
labs(title = "Distribution of Time_on_Site Across Revenue", x = "Revenue", y = "Time on Site") +
theme_minimal()
ggplotly(p)
})
# Box Plot: Time Spent by Region and Revenue
output$box_time_region <- renderPlotly({
p <- ggplot(data, aes(x = as.factor(Region), y = Time_on_Site, fill = as.factor(Revenue))) +
geom_boxplot() +
labs(title = "Time Spent on Site by Region and Revenue", x = "Region", y = "Time on Site", fill = "Revenue") +
theme_minimal()
ggplotly(p)
})
# Pie Chart: Revenue Contribution by Visitor Type
output$pie_visitor_revenue <- renderPlotly({
visitor_revenue <- data %>%
group_by(VisitorType) %>%
summarise(revenue_sessions = sum(Revenue))
plot_ly(visitor_revenue, labels = ~VisitorType, values = ~revenue_sessions, type = 'pie') %>%
layout(title = 'Revenue Contribution by Visitor Type')
})
# Bar Chart: Traffic Source Impact on Revenue Generation
output$traffic_revenue <- renderPlotly({
p <- ggplot(data, aes(x = as.factor(TrafficType), fill = as.factor(Revenue))) +
geom_bar() +
labs(title = "Impact of Traffic Sources on Revenue Generation", x = "TrafficType", fill = "Revenue") +
theme_minimal()
ggplotly(p)
})
# Stacked Bar Chart: Time Spent by Traffic Source
output$stacked_time_traffic <- renderPlotly({
p <- ggplot(data, aes(x = as.factor(Month), y = Time_on_Site, fill = as.factor(TrafficType))) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Time Spent by Traffic Source Across Months", x = "Month", y = "Time on Site", fill = "Traffic Type") +
theme_minimal()
ggplotly(p)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Load required libraries
library(shiny)
library(shinydashboard)
library(ggplot2)
library(dplyr)
library(plotly)
library(DT)  # For displaying the dataset
# Load the dataset
data <- read.csv("processed_shoppers_data.csv")
# Create a new feature for total time spent on the site
data <- data %>%
mutate(Time_on_Site = Administrative_Duration + Informational_Duration + ProductRelated_Duration)
# Define the UI with enhanced design
ui <- dashboardPage(
skin = "black",  # Improved dashboard skin color
dashboardHeader(title = tagList(
span("Online Shopping Behavior", style = "font-weight: bold;")
)),
dashboardSidebar(
sidebarMenu(
menuItem("Dataset Overview", tabName = "overview", icon = icon("table")),
menuItem("Revenue Analysis", tabName = "revenue", icon = icon("chart-line")),
menuItem("User Engagement", tabName = "engagement", icon = icon("clock")),
menuItem("Visitor Type & Region", tabName = "visitor_region", icon = icon("globe")),
menuItem("Traffic Source Insights", tabName = "traffic_source", icon = icon("road")),
menuItem("KPIs", tabName = "kpi", icon = icon("tachometer-alt")),
menuItem("About Dataset", tabName = "about_dataset", icon = icon("info-circle"))  # New section for dataset description
)
),
dashboardBody(
tags$head(tags$style(HTML("
/* Customizing the skin colors */
.skin-blue .main-header .logo {
background-color: #ADD8E6; /* Light blue */
}
.skin-blue .main-header .navbar {
background-color: #EAF2F8; /* Light blue */
}
.skin-blue .main-sidebar {
background-color: #EAF2F8; /* Light grayish blue */
}
.skin-blue .main-header .navbar .sidebar-toggle:hover {
background-color: #EAF2F8; /* Light blue hover */
}
.skin-blue .main-header li.user-header {
background-color: #EAF2F8; /* Light blue for user panel */
}
/* Customizing sidebar color */
.skin-blue .sidebar-menu>li.active>a {
background-color: #EAF2F8; /* LightSkyBlue for active menu */
color: white;
}
/* Customizing box headers */
.box.box-primary {
background-color: #EAF2F8;
}
.box.box-primary>.box-header {
background-color: #EAF2F8;
color: black;
}
"))),
# Custom CSS styling for a polished look
tabItems(
# Tab 1: Dataset Overview
tabItem(tabName = "overview",
h3("Dataset Overview"),
fluidRow(
box(width = 12, dataTableOutput("data_summary"))
)
),
# Tab 2: KPIs for quick stats
tabItem(tabName = "kpi",
h3("Key Performance Indicators"),
fluidRow(
valueBoxOutput("total_sessions", width = 4),
valueBoxOutput("total_revenue", width = 4),
valueBoxOutput("avg_time_on_site", width = 4)
)
),
# Tab 3: Revenue Analysis
tabItem(tabName = "revenue",
h3("Revenue Analysis"),
fluidRow(
box(title = "Impact of Product Related Duration on Revenue", solidHeader = TRUE, status = "primary",
plotlyOutput("scatter_product_duration"), width = 6),
box(title = "Revenue Generation by Visitor Type", solidHeader = TRUE, status = "primary",
plotlyOutput("bar_revenue_visitor"), width = 6)
),
fluidRow(
box(title = "Revenue Generation by Month", solidHeader = TRUE, status = "primary",
plotlyOutput("monthly_revenue"), width = 12)
)
),
# Tab 4: User Engagement
tabItem(tabName = "engagement",
h3("User Engagement"),
fluidRow(
box(title = "Monthly User Engagement by Visitor Type", solidHeader = TRUE, status = "primary",
plotlyOutput("line_time_engagement"), width = 12),
box(title = "Time Spent Distribution", solidHeader = TRUE, status = "primary",
plotlyOutput("violin_time_spent"), width = 12)
)
),
# Tab 5: Visitor Type & Region Analysis
tabItem(tabName = "visitor_region",
h3("Visitor Type and Region Analysis"),
fluidRow(
box(title = "Visitor Distribution by Region", solidHeader = TRUE, status = "primary",
plotlyOutput("visitor_distribution_region"), width = 6),
box(title = "Time Spent on Site by Region and Revenue", solidHeader = TRUE, status = "primary",
plotlyOutput("box_time_region"), width = 6)
),
fluidRow(
box(title = "Revenue Contribution by Visitor Type", solidHeader = TRUE, status = "primary",
plotlyOutput("pie_visitor_revenue"), width = 6)
)
),
# Tab 6: Traffic Source Insights
tabItem(tabName = "traffic_source",
h3("Traffic Source Insights"),
fluidRow(
box(title = "Impact of Traffic Sources on Revenue Generation", solidHeader = TRUE, status = "primary",
plotlyOutput("traffic_revenue"), width = 6),
box(title = "Time Spent by Traffic Source", solidHeader = TRUE, status = "primary",
plotlyOutput("stacked_time_traffic"), width = 6)
)
),
# Tab 7: About Dataset
tabItem(tabName = "about_dataset",
h3("About the Dataset"),
fluidRow(
box(title = "Dataset Description", width = 12, solidHeader = TRUE, status = "primary",
tags$p("This dataset contains online shopping behavior data. It tracks the interaction of users on an e-commerce site with attributes such as time spent on administrative, informational, and product-related pages. It also tracks whether or not a purchase (revenue) was made."),
tags$h4("Features Description:"),
tags$ul(
tags$li(tags$b("Administrative: "), "The number of pages a user visited under the administrative section."),
tags$li(tags$b("Administrative Duration: "), "The total time spent on administrative pages in seconds."),
tags$li(tags$b("Informational: "), "The number of pages visited that provide information about products."),
tags$li(tags$b("Informational Duration: "), "Time spent on informational pages in seconds."),
tags$li(tags$b("ProductRelated: "), "The number of product-related pages visited by the user."),
tags$li(tags$b("ProductRelated Duration: "), "The total time spent on product-related pages by the user."),
tags$li(tags$b("BounceRates: "), "The percentage of visitors who left the site after viewing only one page (indicating lack of engagement)."),
tags$li(tags$b("ExitRates: "), "The percentage of users who exited the site from a specific page during their session."),
tags$li(tags$b("PageValues: "), "The value assigned to a page based on its contribution to generating revenue."),
tags$li(tags$b("SpecialDay: "), "A value that shows the proximity of the session to a special day or holiday, where values close to 1 mean the session occurred near such an event."),
tags$li(tags$b("Month: "), "The month during which the session took place, which helps identify seasonality and trends."),
tags$li(tags$b("OperatingSystems: "), "A numerical code representing the operating system used by the visitor, such as Windows, macOS, or Linux."),
tags$li(tags$b("Browser: "), "A numerical code indicating the browser used by the visitor, such as Chrome, Firefox, or Safari."),
tags$li(tags$b("Region: "), "The geographic region from which the user accessed the site."),
tags$li(tags$b("TrafficType: "), "A code representing the type of traffic that led the user to the site, such as direct traffic or referrals."),
tags$li(tags$b("VisitorType: "), "Indicates whether the visitor is a New Visitor, Returning Visitor, or other."),
tags$li(tags$b("Weekend: "), "A boolean value that specifies if the session occurred on a weekend (True for weekend, False for weekday)."),
tags$li(tags$b("Revenue: "), "A boolean value indicating whether the session resulted in a purchase (True) or not (False)."),
tags$li(tags$b("Time_on_Site: "), "The total time (in seconds) spent on the site by the user, calculated as the sum of Administrative, Informational, and Product-Related durations.")
)
)
)
)
)
)
)
# Define the server logic
server <- function(input, output) {
# Dataset Overview
output$data_summary <- renderDataTable({
datatable(data, options = list(pageLength = 10))
})
# KPIs
output$total_sessions <- renderValueBox({
valueBox(
value = formatC(nrow(data), format = "d", big.mark = ","),
subtitle = "Total Sessions",
icon = icon("users"),
color = "purple"
)
})
output$total_revenue <- renderValueBox({
valueBox(
value = formatC(sum(data$Revenue), format = "d", big.mark = ","),
subtitle = "Total Revenue Generating Sessions",
icon = icon("dollar-sign"),
color = "green"
)
})
output$avg_time_on_site <- renderValueBox({
valueBox(
value = round(mean(data$Time_on_Site), 2),
subtitle = "Average Time on Site (seconds)",
icon = icon("clock"),
color = "blue"
)
})
# Scatter Plot: Impact of ProductRelated_Duration on Revenue
output$scatter_product_duration <- renderPlotly({
plot_ly(
data = data,
x = ~ProductRelated_Duration,
y = ~PageValues,
type = 'scatter',
mode = 'markers',
color = ~Revenue,
marker = list(opacity = 0.6)
) %>%
layout(
title = 'Impact of Product-Related Duration on Page Value by Revenue',
xaxis = list(title = 'ProductRelated_Duration'),
yaxis = list(title = 'PageValues')
)
})
# Bar Chart: Revenue by Visitor Type
output$bar_revenue_visitor <- renderPlotly({
p <- ggplot(data, aes(x = VisitorType, fill = as.factor(Revenue))) +
geom_bar(position = "dodge") +
labs(title = "Revenue Comparison Across Visitor Types", x = "VisitorType", fill = "Revenue") +
theme_minimal()
ggplotly(p)
})
# Line Chart: User Engagement by Visitor Type Over Time
output$line_time_engagement <- renderPlotly({
p <- ggplot(data, aes(x = as.factor(Month), y = Time_on_Site, color = VisitorType, group = VisitorType)) +
geom_line(size = 1) +
geom_point() +
labs(title = "Tracking Monthly User Engagement by Visitor Type", x = "Month", y = "Time on Site", color = "VisitorType") +
theme_minimal()
ggplotly(p)
})
# Violin Plot: Distribution of Time on Site by Revenue
output$violin_time_spent <- renderPlotly({
p <- ggplot(data, aes(x = as.factor(Revenue), y = Time_on_Site, fill = as.factor(Revenue))) +
geom_violin() +
labs(title = "Distribution of Time_on_Site Across Revenue", x = "Revenue", y = "Time on Site") +
theme_minimal()
ggplotly(p)
})
# Box Plot: Time Spent by Region and Revenue
output$box_time_region <- renderPlotly({
p <- ggplot(data, aes(x = as.factor(Region), y = Time_on_Site, fill = as.factor(Revenue))) +
geom_boxplot() +
labs(title = "Time Spent on Site by Region and Revenue", x = "Region", y = "Time on Site", fill = "Revenue") +
theme_minimal()
ggplotly(p)
})
# Pie Chart: Revenue Contribution by Visitor Type
output$pie_visitor_revenue <- renderPlotly({
visitor_revenue <- data %>%
group_by(VisitorType) %>%
summarise(revenue_sessions = sum(Revenue))
plot_ly(visitor_revenue, labels = ~VisitorType, values = ~revenue_sessions, type = 'pie') %>%
layout(title = 'Revenue Contribution by Visitor Type')
})
# Bar Chart: Traffic Source Impact on Revenue Generation
output$traffic_revenue <- renderPlotly({
p <- ggplot(data, aes(x = as.factor(TrafficType), fill = as.factor(Revenue))) +
geom_bar() +
labs(title = "Impact of Traffic Sources on Revenue Generation", x = "TrafficType", fill = "Revenue") +
theme_minimal()
ggplotly(p)
})
# Stacked Bar Chart: Time Spent by Traffic Source
output$stacked_time_traffic <- renderPlotly({
p <- ggplot(data, aes(x = as.factor(Month), y = Time_on_Site, fill = as.factor(TrafficType))) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Time Spent by Traffic Source Across Months", x = "Month", y = "Time on Site", fill = "Traffic Type") +
theme_minimal()
ggplotly(p)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Load required libraries
library(shiny)
library(shinydashboard)
library(ggplot2)
library(dplyr)
library(plotly)
library(DT)  # For displaying the dataset
# Load the dataset
data <- read.csv("processed_shoppers_data.csv")
# Create a new feature for total time spent on the site
data <- data %>%
mutate(Time_on_Site = Administrative_Duration + Informational_Duration + ProductRelated_Duration)
# Define the UI with enhanced design
ui <- dashboardPage(
skin = "black",
dashboardHeader(title = tagList(
span("Online Shopping Behavior", style = "font-weight: bold;")
)),
dashboardSidebar(
sidebarMenu(
menuItem("Dataset Overview", tabName = "overview", icon = icon("table")),
menuItem("Plot Analysis", tabName = "plots", icon = icon("chart-bar")),
menuItem("KPIs", tabName = "kpi", icon = icon("tachometer-alt")),
menuItem("About Dataset", tabName = "about_dataset", icon = icon("info-circle"))
)
),
dashboardBody(
tags$head(tags$style(HTML("/* Custom CSS styling here */"))),
tabItems(
# Tab 1: Dataset Overview
tabItem(tabName = "overview",
h3("Dataset Overview"),
fluidRow(
box(width = 12, dataTableOutput("data_summary"))
)
),
# Tab 2: KPIs for quick stats
tabItem(tabName = "kpi",
h3("Key Performance Indicators"),
fluidRow(
valueBoxOutput("total_sessions", width = 4),
valueBoxOutput("total_revenue", width = 4),
valueBoxOutput("avg_time_on_site", width = 4)
)
),
# Tab 3: Plot Analysis - User can select feature and plot type
tabItem(tabName = "plots",
h3("Interactive Plot Analysis"),
fluidRow(
box(width = 4, title = "Select Feature", solidHeader = TRUE, status = "primary",
selectInput("feature", "Choose Feature:",
choices = c("Product Related Duration", "Visitor Type", "Region", "Traffic Source", "Revenue"))),
box(width = 4, title = "Select Plot Type", solidHeader = TRUE, status = "primary",
selectInput("plot_type", "Choose Plot Type:",
choices = c("Bar Plot", "Scatter Plot", "Line Chart", "Box Plot", "Pie Chart", "Violin Plot")))
),
fluidRow(
box(width = 12, title = "Plot Output", solidHeader = TRUE, status = "primary",
plotlyOutput("dynamic_plot"))
)
),
# Tab 4: About Dataset
tabItem(tabName = "about_dataset",
h3("About the Dataset"),
fluidRow(
box(title = "Dataset Description", width = 12, solidHeader = TRUE, status = "primary",
tags$p("This dataset contains online shopping behavior data ..."),
tags$h4("Features Description:"),
tags$ul(
tags$li(tags$b("Administrative: "), "The number of pages a user visited under the administrative section."),
tags$li(tags$b("Revenue: "), "A boolean value indicating whether the session resulted in a purchase (True) or not (False).")
)
)
)
)
)
)
)
# Define the server logic
server <- function(input, output) {
# Dataset Overview
output$data_summary <- renderDataTable({
datatable(data, options = list(pageLength = 10))
})
# KPIs
output$total_sessions <- renderValueBox({
valueBox(
value = formatC(nrow(data), format = "d", big.mark = ","),
subtitle = "Total Sessions",
icon = icon("users"),
color = "purple"
)
})
output$total_revenue <- renderValueBox({
valueBox(
value = formatC(sum(data$Revenue), format = "d", big.mark = ","),
subtitle = "Total Revenue Generating Sessions",
icon = icon("dollar-sign"),
color = "green"
)
})
output$avg_time_on_site <- renderValueBox({
valueBox(
value = round(mean(data$Time_on_Site), 2),
subtitle = "Average Time on Site (seconds)",
icon = icon("clock"),
color = "blue"
)
})
# Dynamic Plot based on user input
output$dynamic_plot <- renderPlotly({
req(input$feature, input$plot_type)
# Filtering data based on feature selection
plot_data <- data
feature <- input$feature
plot_type <- input$plot_type
# Creating dynamic plot
p <- NULL
if (feature == "Product Related Duration" & plot_type == "Scatter Plot") {
p <- plot_ly(data = plot_data, x = ~ProductRelated_Duration, y = ~PageValues, type = 'scatter', mode = 'markers') %>%
layout(title = 'Product Related Duration vs Page Value')
} else if (feature == "Visitor Type" & plot_type == "Bar Plot") {
p <- ggplot(plot_data, aes(x = VisitorType, fill = as.factor(Revenue))) +
geom_bar(position = "dodge") +
labs(title = "Revenue Comparison Across Visitor Types", x = "Visitor Type", fill = "Revenue") +
theme_minimal()
p <- ggplotly(p)
} else if (feature == "Region" & plot_type == "Box Plot") {
p <- ggplot(plot_data, aes(x = as.factor(Region), y = Time_on_Site, fill = as.factor(Revenue))) +
geom_boxplot() +
labs(title = "Time Spent on Site by Region and Revenue", x = "Region", y = "Time on Site", fill = "Revenue") +
theme_minimal()
p <- ggplotly(p)
} else if (feature == "Traffic Source" & plot_type == "Pie Chart") {
traffic_summary <- plot_data %>% group_by(TrafficType) %>% summarise(count = n())
p <- plot_ly(traffic_summary, labels = ~TrafficType, values = ~count, type = 'pie') %>%
layout(title = 'Traffic Source Distribution')
}
p
})
}
# Run the application
shinyApp(ui = ui, server = server)
